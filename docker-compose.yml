version: '3'

services:
  # База данных PostgreSQL
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-notion_things_db}
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для Channels и кэширования
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django бэкенд (API)
  backend:
    build: ./backend
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-django-insecure-key-for-dev}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-*}
      - USE_POSTGRES=True
      - POSTGRES_DB=${POSTGRES_DB:-notion_things_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - USE_REDIS=True
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "8000:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # WebSocket сервер (Daphne)
  websocket:
    build: ./backend
    command: daphne -b 0.0.0.0 -p 8001 daphne_startup:application
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-django-insecure-key-for-dev}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-*}
      - USE_POSTGRES=True
      - POSTGRES_DB=${POSTGRES_DB:-notion_things_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - USE_REDIS=True
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "8001:8001"
    restart: unless-stopped

  # Фронтенд (Next.js)
  frontend:
    build:
      context: ./frontend
      args:
        - NEXT_PUBLIC_API_URL=https://trpo-rodnik.ru/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - next_static_volume:/app/.next/static
    depends_on:
      - backend
      - websocket
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://trpo-rodnik.ru/api
      - NEXT_PUBLIC_WEBSOCKET_URL=wss://trpo-rodnik.ru
    ports:
      - "3000:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Nginx для обслуживания статических файлов и проксирования запросов
  nginx:
    image: nginx:1.23
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - ./nginx/ssl:/etc/nginx/ssl
      - next_static_volume:/var/www/static/_next/static
    depends_on:
      - backend
      - websocket
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  next_static_volume: 