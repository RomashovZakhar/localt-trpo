"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import api from "@/lib/api"
import { Loader } from "@/components/ui/loader"

// –®–∞–±–ª–æ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const welcomeContent = {
  blocks: [
    {
      type: "header",
      data: {
        text: "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ!",
        level: 3
      }
    },
    {
      type: "paragraph",
      data: {
        text: "–≠—Ç–æ –≤–∞—à –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏, –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã."
      }
    },
    {
      type: "header",
      data: {
        text: "‚ú® –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
        level: 4
      }
    },
    {
      type: "list",
      data: {
        style: "unordered",
        items: [
          "–ù–∞–∂–º–∏—Ç–µ <kbd>/</kbd> –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥",
          "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏ –∏ —á–µ–∫-–ª–∏—Å—Ç—ã",
          "–î–æ–±–∞–≤–ª—è–π—Ç–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        ]
      }
    },
    {
      type: "header",
      data: {
        text: "‚úÖ –í–∞—à–∏ –ø–µ—Ä–≤—ã–µ –∑–∞–¥–∞—á–∏",
        level: 4
      }
    },
    {
      type: "list",
      data: {
        style: "checklist",
        items: [
          "–ò–∑—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
          "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
          "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
          "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–º —Å –∫–æ–ª–ª–µ–≥–æ–π"
        ]
      }
    },
    {
      type: "paragraph",
      data: {
        text: "–£–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å –≤–∞—à–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
      }
    }
  ],
  time: new Date().getTime(),
  version: "2.27.0"
};

export default function DocumentsIndexPage() {
  const router = useRouter()
  const [isCreatingRootDocument, setIsCreatingRootDocument] = useState(false)

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const token = localStorage.getItem("accessToken")
    
    if (!token) {
      // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
      router.push("/login")
      return
    }
    
    // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
    const fetchRootDocument = async () => {
      try {
        console.log("–ó–∞–ø—Ä–æ—Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã /documents...");
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
        const response = await api.get("/documents/?root=true")
        console.log("–û—Ç–≤–µ—Ç API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", response.data)
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
        let rootDocumentId = null;
        
        if (Array.isArray(response.data) && response.data.length > 0) {
          console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${response.data.length} –∫–æ—Ä–Ω–µ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π`);
          
          // –°—Ç—Ä–æ–≥–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –≤—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º ID (—Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π) 
          const sortedDocs = [...response.data].sort((a, b) => {
            const idA = parseInt(a.id);
            const idB = parseInt(b.id);
            return idA - idB;  // –û—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É
          });
          
          rootDocumentId = sortedDocs[0].id;
          console.log(`–í—ã–±—Ä–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å ID ${rootDocumentId} –∫–∞–∫ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –∫–æ—Ä–Ω–µ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç`);
        } else if (response.data && response.data.id) {
          // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
          rootDocumentId = response.data.id;
          console.log(`–í—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–Ω–µ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Å ID ${rootDocumentId}`);
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–µ–≥–æ
        if (rootDocumentId) {
          console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É —Å ID ${rootDocumentId}`);
          router.push(`/documents/${rootDocumentId}`);
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
          console.log("–ö–æ—Ä–Ω–µ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π");
          await createRootDocument();
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", err)
        // –ï—Å–ª–∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        await createRootDocument();
      }
    }

    // –í—ã–¥–µ–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const createRootDocument = async () => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      if (isCreatingRootDocument) {
        console.log("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º...");
        // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
        await new Promise(resolve => setTimeout(resolve, 2000));
        const retryResponse = await api.get("/documents/?root=true");
        
        if (Array.isArray(retryResponse.data) && retryResponse.data.length > 0) {
          console.log("–î–æ–∫—É–º–µ–Ω—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...");
          const sortedDocs = [...retryResponse.data].sort((a, b) => {
            const idA = parseInt(a.id);
            const idB = parseInt(b.id);
            return idA - idB;
          });
          
          const rootDocumentId = sortedDocs[0].id;
          router.push(`/documents/${rootDocumentId}`);
          return;
        }
        
        console.log("–î–æ–∫—É–º–µ–Ω—Ç –≤—Å–µ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...");
        // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—Å—è
      setIsCreatingRootDocument(true);
      
      try {
        console.log("–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∫–æ—Ä–Ω–µ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º");
        const response = await api.post("/documents/", {
          title: "–ú–æ–π –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
          content: welcomeContent,
          is_root: true
        });
        
        console.log("–ö–æ—Ä–Ω–µ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", response.data);
        router.push(`/documents/${response.data.id}`);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", err);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è
        setIsCreatingRootDocument(false);
      }
    };

    fetchRootDocument();
  }, [router, isCreatingRootDocument]);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <Loader 
        size="lg" 
        text="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..." 
      />
    </div>
  );
}
